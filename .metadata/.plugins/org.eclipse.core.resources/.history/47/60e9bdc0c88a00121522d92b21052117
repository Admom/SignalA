package com.zsoft.SignalA.Hubs;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONObject;

public class HubProxy implements IHubProxy {
    private String mHubName;
    private HubConnection mConnection;
    //private Map<string, JSONObject> _state = new Dictionary<string, JToken>(StringComparer.OrdinalIgnoreCase);
    private Map<String, HubOnDataCallback> mSubscriptions = new HashMap<String, HubOnDataCallback>();

	public HubProxy(HubConnection hubConnection, String hubName) {
		mConnection = hubConnection;
		mHubName = hubName;
	}

	
	// Executes a method on the server asynchronously
	@Override
	public void Invoke(String method, JSONObject args,
			HubInvokeCallback callback) {

		if (method == null)
        {
            throw new IllegalArgumentException("method");
        }

        if (args == null)
        {
            throw new IllegalArgumentException("args");
        }

        var tokenifiedArguments = new JToken[args.Length];
        for (int i = 0; i < tokenifiedArguments.Length; i++)
        {
            tokenifiedArguments[i] = JToken.FromObject(args[i]);
        }

        var tcs = new TaskCompletionSource<T>();
        var callbackId = mConnection.RegisterCallback(result =>
        {
            if (result != null)
            {
                if (result.Error != null)
                {
                    tcs.TrySetUnwrappedException(new InvalidOperationException(result.Error));
                }
                else
                {
                    try
                    {
                        if (result.State != null)
                        {
                            foreach (var pair in result.State)
                            {
                                this[pair.Key] = pair.Value;
                            }
                        }

                        if (result.Result != null)
                        {
                            tcs.TrySetResult(result.Result.ToObject<T>());
                        }
                        else
                        {
                            tcs.TrySetResult(default(T));
                        }
                    }
                    catch (Exception ex)
                    {
                        // If we failed to set the result for some reason or to update
                        // state then just fail the tcs.
                        tcs.TrySetUnwrappedException(ex);
                    }
                }
            }
            else
            {
                tcs.TrySetCanceled();
            }
        });

        var hubData = new HubInvocation
        {
            Hub = _hubName,
            Method = method,
            Args = tokenifiedArguments,
            CallbackId = callbackId
        };

        if (_state.Count != 0)
        {
            hubData.State = _state;
        }

        var value = JsonConvert.SerializeObject(hubData);

        _connection.Send(value).ContinueWith(task =>
        {
            if (task.IsCanceled)
            {
                tcs.TrySetCanceled();
            }
            else if (task.IsFaulted)
            {
                tcs.TrySetUnwrappedException(task.Exception);
            }
        },
        TaskContinuationOptions.NotOnRanToCompletion);

        return tcs.Task;
    }

	

	public void On(String eventName, HubOnDataCallback callback) 
	{
		Subscribe(eventName, callback);
	}
	
	
	public void Subscribe(String eventName, HubOnDataCallback callback)
	{
		if(eventName==null) throw new IllegalArgumentException("eventName can not be null");
		if(callback==null) throw new IllegalArgumentException("callback can not be null");

		if(!mSubscriptions.containsKey(eventName))
		{
			mSubscriptions.put(eventName, callback);
		}
	}
	
    public void InvokeEvent(String eventName, JSONObject args)
    {
        HubOnDataCallback subscription;
        if(mSubscriptions.containsKey(eventName))
        {
        	subscription = mSubscriptions.get(eventName);
            subscription.OnReceived(args);
        }
    }


}
