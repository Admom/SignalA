package com.zsoft.SignalA.transport.longpolling;

import java.util.HashMap;

import java.util.Map;

import org.json.JSONObject;

import com.androidquery.AQuery;
import com.androidquery.callback.AjaxCallback;
import com.androidquery.callback.AjaxStatus;
import com.androidquery.util.Constants;
import com.zsoft.SignalA.Connection;
import com.zsoft.SignalA.ConnectionBase;
import com.zsoft.SignalA.ConnectionState;
import com.zsoft.SignalA.SignalAUtils;
import com.zsoft.SignalA.SendCallback;
import com.zsoft.SignalA.Transport.ProcessResult;
import com.zsoft.SignalA.Transport.TransportHelper;

public class ReconnectingState extends StopableStateWithCallback {

	public ReconnectingState(ConnectionBase connection) {
		super(connection);
	}

	@Override
	public ConnectionState getState() {
		return ConnectionState.Reconnecting;
	}

	@Override
	public void Start() {
	}

	@Override
	public void Send(CharSequence text, SendCallback callback) {
		callback.OnError(new Exception("Not connected"));
	}

	@Override
	protected void OnRun() {
		AQuery aq = new AQuery(mConnection.getContext());
		
		if(DoStop()) return; 

	    if (mConnection.getMessageId() == null)
		{
	    	// No message received yet....connect instead of reconnect
			mConnection.SetNewState(new ConnectingState(mConnection));
			return;
		}
	    
	    String url = SignalAUtils.EnsureEndsWith(mConnection.getUrl(), "/");
		url += "reconnect";
	    url += TransportHelper.GetReceiveQueryString(mConnection, null, TRANSPORT_NAME);

		Map<String, Object> params = new HashMap<String, Object>();
		      
		AjaxCallback<JSONObject> cb = new AjaxCallback<JSONObject>()
		{
			@Override
			public void callback(String url, JSONObject json, AjaxStatus status) {
				if(DoStop()) return; 

                try
                {
                    if (json!=null)
                    {
                		ProcessResult result = TransportHelper.ProcessResponse(mConnection, json);

                		if(result.processingFailed)
                		{
                    		mConnection.setError(new Exception("Error while proccessing response."));
                		}
                		else if(result.disconnected)
                		{
      						mConnection.SetNewState(new DisconnectedState(mConnection));
    						return;
                		}
                    }
                    else
                    {
					    mConnection.setError(new Exception("Error when calling endpoint. Returncode: " + status.getCode()));
                    }
                }
                finally
                {
					mIsRunning.set(false);

					// Loop if we are still reconnecting
					if(mConnection.getCurrentState() == ReconnectingState.this)
						Run();
                }
			}
		};

		
		synchronized (mCallbackLock) {
			mCurrentCallback = cb;
		}
		//aq.ajax(url, JSONObject.class, cb);
		cb.url(url).type(JSONObject.class).expire(-1).params(params).method(Constants.METHOD_POST);
		aq.ajax(cb);
	}


}
